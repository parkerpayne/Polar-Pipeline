#!/bin/bash

# Function to check if a directory is nonempty
is_nonempty_dir() {
    [ -d "$1" ] && [ "$(ls -A "$1")" ]
}


# Function to check if a line is in the fstab
check_fstab() {
    grep -qF "$FSTAB_LINE" /etc/fstab
}

# Function to add line to fstab
add_fstab() {
    echo "$FSTAB_LINE" | sudo tee -a /etc/fstab
}

# Function to check if directory exists
check_directory_exists() {
    [ -d "$1" ]
}

# Function to create directory
create_directory() {
    sudo mkdir -p "$1"
}

# Function to check if directory is empty
check_directory_empty() {
    [ -z "$(ls -A "$1")" ]
}

# Function to mount directory
mount_directory() {
    sudo mount "$1"
}

# Function to check if tasks.py exists
check_tasks_py() {
    [ -f "$1/tasks.py" ]
}

if dpkg-query -W -f='${Status}' nfs-common 2>/dev/null | grep -q "ok installed"; then
    # echo "nfs-common is already installed."
else
    # echo "nfs-common is not installed. Installing now..."
    sudo apt update
    sudo apt install -y nfs-common
fi

# Check if the provided line is in the fstab
if ! check_fstab; then
    echo "Line not found in /etc/fstab. Adding it..."
    add_fstab
else
    echo "Line already exists in /etc/fstab."
fi

# Check if the directory /mnt/pipeline_resources exists
MNT_DIR="/mnt/pipeline_resources"
if ! check_directory_exists "$MNT_DIR"; then
    echo "Directory $MNT_DIR does not exist. Creating it..."
    create_directory "$MNT_DIR"
else
    echo "Directory $MNT_DIR already exists."
fi

# Check if the directory is empty
if check_directory_empty "$MNT_DIR"; then
    echo "Directory $MNT_DIR is empty. Attempting to mount..."
    if mount_directory "$MNT_DIR"; then
        echo "Mount succeeded."
    else
        echo "Mount failed. Check server's /etc/exports file. Exiting."
        exit 1
    fi
else
    echo "Directory $MNT_DIR is not empty."
fi

# Check if tasks.py exists in the mounted directory
if check_tasks_py "$MNT_DIR"; then
    echo "tasks.py found in $MNT_DIR."
else
    echo "tasks.py not found in $MNT_DIR. Exiting."
    exit 1
fi

PROGRAMS="minimap2 samtools nextflow docker vep"
missing_files=()
for file in ${PROGRAMS}; do
    if ! command -v $file &> /dev/null; then
        missing_files+=("$file")
    fi
done

if [ ${#missing_files[@]} -gt 0 ]; then
    failed=()
    echo "The following programs are missing and will attempt to be installed:"
    for file in "${missing_files[@]}"; do
        echo "  - $file"
    done

    # Step 1: Install dependencies
    echo "Installing dependencies..."
    sudo apt update
    sudo apt install -y pigz ca-certificates curl bedtools tabix celery python3-pip zlib1g-dev libbz2-dev liblzma-dev default-jre libncurses5-dev libncursesw5-dev libcurl4-openssl-dev screen
    pip install psycopg2-binary bs4
    sudo cpan DBI Math::CDF List::MoreUtils Module::Build

    if ! command -v "minimap2" &> /dev/null; then
        # Step 2: Download and setup Minimap2
        echo "Downloading and setting up Minimap2..."
        cd ~
        cp -r /mnt/pipeline_resources/worker_resources/minimap2-2.28_x64-linux ~/
        MINIMAP_DIR=/home/$USER/minimap2-2.28_x64-linux
        echo "PATH=\"$MINIMAP_DIR:\$PATH\"" >> ~/.bashrc
        eval "$(cat ~/.bashrc | tail -n +10)"
    fi
    if ! command -v "minimap2" &> /dev/null; then
        failed+=("minimap2")
    fi

    if ! command -v "samtools" &> /dev/null; then
        # Step 3: Download and setup Samtools
        echo "Downloading and setting up Samtools..."
        cd ~
        cp -r /mnt/pipeline_resources/worker_resources/samtools-1.20 ~/
        SAMTOOLS_DIR=/home/$USER/samtools-1.20
        echo "PATH=\"$SAMTOOLS_DIR:\$PATH\"" >> ~/.bashrc
        eval "$(cat ~/.bashrc | tail -n +10)"
    fi
    if ! command -v "samtools" &> /dev/null; then
        failed+=("samtools")
    fi

    if ! command -v "nextflow" &> /dev/null; then
        # Step 4: Install Nextflow
        echo "Installing Nextflow..."
        cd ~
        curl -s https://get.nextflow.io | bash
        sudo mv nextflow /usr/local/bin
    fi
    if ! command -v "nextflow" &> /dev/null; then
        failed+=("nextflow")
    fi
    
    if ! command -v "docker" &> /dev/null; then
        # Step 5: Install Docker
        echo "Installing Docker..."
        sudo install -m 0755 -d /etc/apt/keyrings
        sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
        sudo chmod a+r /etc/apt/keyrings/docker.asc
        echo \
          "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
          $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
          sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
        sudo apt-get update
        sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

        # Docker post-installation steps
        sudo groupadd docker
        sudo usermod -aG docker $USER
    fi
    if ! command -v "docker" &> /dev/null; then
        failed+=("docker")
    fi

    if ! command -v "vep" &> /dev/null; then
        # Step 6: Install Vep
        echo "Installing Vep..."
        cd /mnt/pipeline_resources/worker_resources/
        cp -r ensembl-vep/ ~/
        echo "Setting up vep cache..."
        cp -r .vep/ ~/
        echo "Setting up vep-resources..."
        cp -r vep-resources/ ~/
        VEP_DIR=/home/$USER/ensembl-vep/
        echo "PATH=\"$VEP_DIR:\$PATH\"" >> ~/.bashrc
        eval "$(cat ~/.bashrc | tail -n +10)"

    fi
    if ! command -v "vep" &> /dev/null; then
        failed+=("vep")
    fi


    if [ ${#failed[@]} -gt 0 ]; then
        echo "The following programs failed to install:"
        for program in "${failed[@]}"; do
            echo "  - $program"
        done
        exit 1
    else
      echo "Setup completed successfully. Please restart your machine."
    fi
else

    echo "Starting worker!"
    cd $MNT_DIR
    LOG_FILE="$MNT_DIR/worker_logs/$USER.log"
    SCREEN_SESSION="polarpipelineworker"
    COMMAND="celery -A tasks worker --concurrency=1 --prefetch-multiplier=1 --loglevel=INFO > $LOG_FILE 2>&1"
    screen -dmS $SCREEN_SESSION bash -c "$COMMAND"
    echo "Worker started in screen shell!"

fi